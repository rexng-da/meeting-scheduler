module MainTest where

import Main
import Range
import Daml.Script
import DA.Assert
import DA.Time
import DA.Date
import DA.Monoid.Types
import DA.Set qualified as Set

script : Script ()
script = do
    rex <- allocatePartyWithHint "Rex" (PartyIdHint "Rex")
    bob <- allocatePartyWithHint "Bob" (PartyIdHint "Bob")
    alice <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")

    let meeting = Meeting with
            host = rex
            participants = Set.fromList [bob, alice]
            timeRange = time (date 2022 Aug 5) 15 0 0 <-> time (date 2022 Aug 5) 16 0 0
    
    proposalCid <- rex `submit` createCmd MeetingProposal with
        accepted = Set.singleton rex
        ..
    
    proposalCid <- bob `submit` exerciseCmd proposalCid AcceptMeetingProposal with
        actor = bob

    proposalCid <- alice `submit` exerciseCmd proposalCid AcceptMeetingProposal with
        actor = alice

    meetingCid <- rex `submit` exerciseCmd proposalCid FinalizeMeeting with
        actor = rex

    pure ()

participant_repropose_time_script : Script ()
participant_repropose_time_script = do
    rex <- allocatePartyWithHint "Rex" (PartyIdHint "Rex")
    bob <- allocatePartyWithHint "Bob" (PartyIdHint "Bob")
    alice <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")

    let meeting = Meeting with
            host = rex
            participants = Set.fromList [bob, alice]
            timeRange = time (date 2022 Aug 5) 15 0 0 <-> time (date 2022 Aug 5) 16 0 0
    
    proposalCid <- rex `submit` createCmd MeetingProposal with
        accepted = Set.singleton rex
        ..
    
    proposalCid <- bob `submit` exerciseCmd proposalCid AcceptMeetingProposal with
        actor = bob

    proposalCid <- alice `submit` exerciseCmd proposalCid ReproposeTime with
        actor = alice
        newTimeRange = time (date 2022 Aug 15) 15 0 0 <-> time (date 2022 Aug 15) 16 0 0

    proposalCid <- bob `submit` exerciseCmd proposalCid AcceptMeetingProposal with
        actor = bob

    proposalCid <- rex `submit` exerciseCmd proposalCid AcceptMeetingProposal with
        actor = rex

    meetingCid <- rex `submit` exerciseCmd proposalCid FinalizeMeeting with
        actor = rex

    pure ()

host_repropose_time_script : Script ()
host_repropose_time_script = do
    rex <- allocatePartyWithHint "Rex" (PartyIdHint "Rex")
    bob <- allocatePartyWithHint "Bob" (PartyIdHint "Bob")
    alice <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")

    let meeting = Meeting with
            host = rex
            participants = Set.fromList [bob, alice]
            timeRange = time (date 2022 Aug 5) 15 0 0 <-> time (date 2022 Aug 5) 16 0 0
    
    proposalCid <- rex `submit` createCmd MeetingProposal with
        accepted = Set.singleton rex
        ..
    
    proposalCid <- bob `submit` exerciseCmd proposalCid AcceptMeetingProposal with
        actor = bob

    proposalCid <- rex `submit` exerciseCmd proposalCid ReproposeTime with
        actor = rex
        newTimeRange = time (date 2022 Aug 15) 15 0 0 <-> time (date 2022 Aug 15) 16 0 0

    proposalCid <- bob `submit` exerciseCmd proposalCid AcceptMeetingProposal with
        actor = bob

    proposalCid <- alice `submit` exerciseCmd proposalCid AcceptMeetingProposal with
        actor = alice

    meetingCid <- rex `submit` exerciseCmd proposalCid FinalizeMeeting with
        actor = rex

    pure ()

ranges_always_have_start_less_than_end : Script ()
ranges_always_have_start_less_than_end = do
    let
        start = 23
        end = 21
        range = start <-> end

    assertMsg "Start should be less than end" (range.start <= range.end)

ranges_obey_functor_identity : Script ()
ranges_obey_functor_identity = do
    let
        start = 23
        end = 21
        expected = start <-> end
        actual = fmap identity expected

    expected === actual

ranges_obey_functor_composition : Script ()
ranges_obey_functor_composition = do
    let
        start = 23
        end = 21
        expected = start <-> end
        actual1 = (fmap (+ 2) . fmap (+ 1)) expected
        actual2 = fmap ((+ 2) . (+ 1)) expected

    actual2 === actual1

ranges_have_monoid_identity : Script ()
ranges_have_monoid_identity = do
    let
        start = Sum 21
        end = Sum 23
        expected = start <-> end
        actual = expected <> mempty

    expected === actual
