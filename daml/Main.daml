module Main where

import DA.Text qualified as T

newtype RouteNumber = RouteNumber { unRouteNumber : Text }

instance Eq RouteNumber where
  (==) (RouteNumber x) (RouteNumber y) =
    T.asciiToUpper x == T.asciiToUpper y

instance Show RouteNumber where
  show = T.asciiToUpper . unRouteNumber

data VehicleInfo = VehicleInfo
  with
    make : Text
    model : Text
  deriving (Eq, Show)

-- Assuming end-to-end trip with no stops in-between
template Route
  with
    operator : Party
    routeNumber : RouteNumber
    vehicleInfo : VehicleInfo
    lastFiveActualTripTime : [Int]
  where
    ensure length lastFiveActualTripTime <= 5
    signatory operator
    choice UpdateLastTripTime : ContractId Route
      with
        tripCid : ContractId Trip
      controller operator
      do
        trip <- fetch tripCid
        create this
          with
            lastFiveActualTripTime = take 5 $ trip.timeTaken :: lastFiveActualTripTime 
  
template Trip
  with
    passenger : Party
    operator : Party
    routeNumber : RouteNumber
    timeTaken : Int
  where
    signatory passenger
    observer operator
