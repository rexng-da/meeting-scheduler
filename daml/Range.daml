module Range (
    Range,
    range,
    isInRange,
    isNotInRange,
    (<->)) where

data Range a = Range with
    start : a
    end : a

instance Eq a => Eq (Range a) where
  x == y = x.start == y.start && x.end == y.end

instance Show a => Show (Range a) where
  show (Range with ..) = show start <> "â€“" <> show end

instance Functor Range where
  fmap f (Range with ..) = Range with start = f start, end = f end

instance Applicative Range where
  pure x = Range with start = x, end = x
  f <*> x = Range with start = f.start x.start, end = f.end x.end

instance Semigroup a => Semigroup (Range a) where
  x <> y = Range with start = x.start <> y.start, end = x.end <> y.end

instance Monoid a => Monoid (Range a) where
  mempty = Range with start = mempty, end = mempty

range : Ord a => a -> a -> Range a
range start end =
    if start > end
    then range end start
    else Range with ..

isInRange : Ord a => a -> Range a -> Bool
isInRange x r = x >= r.start && x <= r.end

isNotInRange : Ord a => a -> Range a -> Bool
isNotInRange = curry $ not . uncurry isInRange

(<->) : Ord a => a -> a -> Range a
(<->) = range
