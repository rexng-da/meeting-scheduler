module Range (
    Range,
    range,
    (<->)) 
where

data Range a = Range
  with
      start: a
      end: a

instance Eq a => Eq (Range a) where
  x == y = x.start == y.start && x.end == y.end

instance Show a => Show (Range a) where
  show (Range with ..) = show start <> "â€“" <> show end

instance Functor Range where
  fmap f (Range with ..) = Range with start = f start, end = f end

range : Ord a => a -> a -> Range a
range start end =
    if start > end
    then range end start
    else Range with ..

(<->) : Ord a => a -> a -> Range a
(<->) = range
